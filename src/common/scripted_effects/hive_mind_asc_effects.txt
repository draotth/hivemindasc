# Given a species, create a mod with trait_hive_mind and apply to all pops, leaders
# and armies that have the original species and the same owner as the scope object.
# Scope: Something that has a species and an owner
create_hive_mind_species_mod = {
	species = {
		create_species = {
			is_mod = yes
			name = this
			plural = this
			class = this
			traits = this
			traits = {
				trait = trait_hive_mind
			}
		}
		save_event_target_as = changing_species
	}

	owner = {
		every_owned_pop = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_pool_leader = {
			limit = { is_exact_same_species = event_target:changing_species }
			change_species = last_created_species
		}
		every_owned_army = {
			limit = {
				exists = species
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
		every_owned_ship = {
			limit = {
				is_ship_class = shipclass_colonizer
				is_exact_same_species = event_target:changing_species
			}
			change_species = last_created_species
		}
	}
}

#scope: country
prepare_for_hive_mind_asc = {

	set_country_flag = hive_mind
	
	if = {
		limit = {
			OR = {
				has_policy_flag = refugees_allowed
				has_policy_flag = refugees_only_citizens
			}
		}
		set_policy = {
			policy = refugees
			option = refugees_not_allowed
			cooldown = no
		}
	}
	if = {
		limit = {
			OR = {
				has_policy_flag = purge_not_allowed
			}
		}
		set_policy = {
			policy = purge
			option = purge_displacement_only
			cooldown = no
		}
	}
	
	if = {
		limit = {
			OR = {
				has_policy_flag = slavery_allowed
			}
		}
		set_policy = {
			policy = slavery
			option = slavery_not_allowed
			cooldown = no
		}
	}
	set_policy = {
		policy = robot_pop_policy
		option = robot_pops_outlawed
		cooldown = no
	}
	
	set_policy = {
		policy = artificial_intelligence_policy
		option = ai_outlawed
		cooldown = no
	}

	#Make the main species and set it
	if = {
		limit = {
			any_owned_pop = {
				is_exact_same_species = root
			}
		}
		random_owned_pop = {
			limit = { is_exact_same_species = root }
			create_hive_mind_species_mod = yes
			species = {
				save_event_target_as = main_hive_mind_species
			}
		}
	}
	else = {
		random_owned_pop = {
			limit = { is_same_species = root }
			create_hive_mind_species_mod = yes
			species = {
				save_event_target_as = main_hive_mind_species
			}
		}
	}
	
	shift_ethic = ethic_gestalt_consciousness
	change_government = {
		authority = auth_hive_mind
		cooldown = no
		remove_invalid_civics = yes
	}

	while = {
		limit = {
			any_owned_pop = {
				is_sapient = yes
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_pop = {
			limit = {
				is_sapient = yes
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			create_hive_mind_species_mod = yes
		}
	}
	
	while = {
		limit = {
			any_owned_leader = {
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_leader = {
			limit = {
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_hive_mind_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}
	
	while = {
		limit = {
			any_pool_leader = {
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_pool_leader = {
			limit = {
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev
				}
				last_created_pop = {
					create_hive_mind_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}
	
	while = {
		limit = {
			any_owned_army = {
				exists = species
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
		}
		random_owned_army = {
			limit = {
				exists = species
				species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
				}
			}
			root.capital_scope = { #workaround to prevent main species from accidentally flipping
				create_pop = {
					species = prev.species
				}
				last_created_pop = {
					create_hive_mind_species_mod = yes
					kill_pop = yes
				}
			}
		}
	}

	every_owned_ship = {
		limit = {
			is_ship_class = shipclass_colonizer
			species = {
					NOR = {
						has_trait = trait_hive_mind 
						has_trait = trait_mechanical
						has_trait = trait_machine_unit
						has_trait = leader_trait_curator
					}
			}
		}
		root.capital_scope = { #workaround to prevent main species from accidentally flipping
			create_pop = {
				species = prev
			}
			last_created_pop = {
				create_hive_mind_species_mod = yes
				kill_pop = yes
			}
		}
	}

	every_owned_leader = {
		limit = {
			species = { has_trait = trait_hive_mind  }
			NOR = {
				has_trait = leader_trait_ruler_hive_mind
			}
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_hive_mind
			add_ruler_trait = leader_trait_ruler_hive_mind
		}
	}
	
	every_owned_leader = {
		limit = {
			species = { has_trait = trait_hive_mind }
			NOT = {
				has_trait = leader_trait_ruler_hive_mind
			}
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_hive_mind
		}
	}
	
	every_pool_leader = {
		limit = {
			species = { has_trait = trait_hive_mind }
			NOT = {
				has_trait = leader_trait_ruler_hive_mind
			}
		}
		if = {
			limit = { leader_class = ruler }
			add_trait = leader_trait_ruler_hive_mind
		}
	}

	observer_event = { id = hive_mind_asc.4 }
	
	every_country = {
		limit = {
			is_ai = no
			NOT = { is_same_value = root }
			has_communications = root
		}
		country_event = { id = hive_mind_asc.3 days = 5 }
	}
}

#scope: country
finalize_hive_mind_asc = {

	#Set living standards
	every_owned_species = {
		limit = {
			species = { has_trait = trait_hive_mind }
		}

		set_citizenship_type = {
			country = root
			type = citizenship_full
			cooldown = no 
		}

		set_living_standard = {
			country = root
			type = living_standard_hive_mind
			cooldown = no
		}
	}
	if = {
		limit = {
			NOT = { root = { has_civic = civic_hive_devouring_swarm } }
		}
		every_owned_species = {

			limit = {
				NOT = { species = { has_trait = trait_hive_mind } }
			}

			set_citizenship_type = {
				country = root
				type = citizenship_assimilation
				cooldown = no
			}

			set_living_standard = {
				country = root
				type = living_standard_ego_assimilation
				cooldown = no
			}
		}
	}

	give_technology = { tech = tech_hive_node message = no }

	every_owned_planet = {
		validate_planet_buildings_and_districts = yes
		check_planet_employment = yes
	}
	set_government_cooldown = no
}